import torch
import numpy as np

__all__ = ['mappings']


mappings = dict()

def mapping(f):
    arr = f.__name__.split('_')
    mappings[tuple(arr)] = f
    arr[0] = "DeepAug"
    mappings[tuple(arr)] = f
    return f

@mapping
def Identity_Identity(logits: torch.Tensor):
    return logits.argmax(dim=-1)


@mapping
def ImageNet1k_ImageNet16(logits: torch.Tensor):
    cls_to_idx = {0: [404], 1: [294, 295, 296, 297], 2: [444, 671], 3: [8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], 4: [472, 554, 625, 814, 914], 5: [440, 720, 737, 898, 899, 901, 907], 6: [436, 511, 817], 7: [281, 282, 283, 284, 285, 286], 8: [423, 559, 765, 857], 9: [409, 530, 892], 10: [152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 261, 262, 263, 265, 266, 267, 268], 11: [385, 386], 12: [508, 878], 13: [499], 14: [766], 15: [555, 569, 656, 675, 717, 734, 864, 867]}
    idx_to_cls = {404: 0, 294: 1, 295: 1, 296: 1, 297: 1, 444: 2, 671: 2, 8: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 3, 16: 3, 18: 3, 19: 3, 20: 3, 22: 3, 23: 3, 24: 3, 80: 3, 81: 3, 82: 3, 83: 3, 87: 3, 88: 3, 89: 3, 90: 3, 91: 3, 92: 3, 93: 3, 94: 3, 95: 3, 96: 3, 98: 3, 99: 3, 100: 3, 127: 3, 128: 3, 129: 3, 130: 3, 131: 3, 132: 3, 133: 3, 135: 3, 136: 3, 137: 3, 138: 3, 139: 3, 140: 3, 141: 3, 142: 3, 143: 3, 144: 3, 145: 3, 472: 4, 554: 4, 625: 4, 814: 4, 914: 4, 440: 5, 720: 5, 737: 5, 898: 5, 899: 5, 901: 5, 907: 5, 436: 6, 511: 6, 817: 6, 281: 7, 282: 7, 283: 7, 284: 7, 285: 7, 286: 7, 423: 8, 559: 8, 765: 8, 857: 8, 409: 9, 530: 9, 892: 9, 152: 10, 153: 10, 154: 10, 155: 10, 156: 10, 157: 10, 158: 10, 159: 10, 160: 10, 161: 10, 162: 10, 163: 10, 164: 10, 165: 10, 166: 10, 167: 10, 168: 10, 169: 10, 170: 10, 171: 10, 172: 10, 173: 10, 174: 10, 175: 10, 176: 10, 177: 10, 178: 10, 179: 10, 180: 10, 181: 10, 182: 10, 183: 10, 184: 10, 185: 10, 186: 10, 187: 10, 188: 10, 189: 10, 190: 10, 191: 10, 193: 10, 194: 10, 195: 10, 196: 10, 197: 10, 198: 10, 199: 10, 200: 10, 201: 10, 202: 10, 203: 10, 205: 10, 206: 10, 207: 10, 208: 10, 209: 10, 210: 10, 211: 10, 212: 10, 213: 10, 214: 10, 215: 10, 216: 10, 217: 10, 218: 10, 219: 10, 220: 10, 221: 10, 222: 10, 223: 10, 224: 10, 225: 10, 226: 10, 228: 10, 229: 10, 230: 10, 231: 10, 232: 10, 233: 10, 234: 10, 235: 10, 236: 10, 237: 10, 238: 10, 239: 10, 240: 10, 241: 10, 243: 10, 244: 10, 245: 10, 246: 10, 247: 10, 248: 10, 249: 10, 250: 10, 252: 10, 253: 10, 254: 10, 255: 10, 256: 10, 257: 10, 259: 10, 261: 10, 262: 10, 263: 10, 265: 10, 266: 10, 267: 10, 268: 10, 385: 11, 386: 11, 508: 12, 878: 12, 499: 13, 766: 14, 555: 15, 569: 15, 656: 15, 675: 15, 717: 15, 734: 15, 864: 15, 867: 15}
    logits_np = logits.cpu().numpy()
    cls_probs = list()
    for i in range(16):
        values = np.take(logits_np, cls_to_idx[i], axis=-1).mean(axis=-1)
        cls_probs.append(values)
    probs = np.transpose(cls_probs)
    preds = probs.argmax(axis=-1)
    return torch.from_numpy(preds).to(logits.device)

@mapping
def ImageNet1k_CueConflict(logits: torch.Tensor):
    # ImageNet1k index to ImageNet16
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNet1k_Edge(logits: torch.Tensor):
    # ImageNet1k index to ImageNet16
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNet1k_Silhouette(logits: torch.Tensor):
    # ImageNet1k index to ImageNet16
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNet1k_Sketch(logits: torch.Tensor):
    # ImageNet1k index to ImageNet16
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNetStylized_CueConflict(logits: torch.Tensor):
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNetStylized_Edge(logits: torch.Tensor):
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNetStylized_Silhouette(logits: torch.Tensor):
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNetStylized_Sketch(logits: torch.Tensor):
    return ImageNet1k_ImageNet16(logits)


@mapping
def ImageNet1k_ImageNetR(logits: torch.Tensor):
    probs = torch.softmax(logits, dim=-1)
    indices = [1, 2, 4, 6, 8, 9, 11, 13, 22, 23, 26, 29, 31, 39, 47, 63, 71, 76, 79, 84, 90, 94, 96, 97, 99, 100, 105, 107, 113, 122, 125, 130, 132, 144, 145, 147, 148, 150, 151, 155, 160, 161, 162, 163, 171, 172, 178, 187, 195, 199, 203, 207, 208, 219, 231, 232, 234, 235, 242, 245, 247, 250, 251, 254, 259, 260, 263, 265, 267, 269, 276, 277, 281, 288, 289, 291, 292, 293, 296, 299, 301, 308, 309, 310, 311, 314, 315, 319, 323, 327, 330, 334, 335, 337, 338, 340, 341, 344, 347, 353, 355, 361, 362, 365, 366, 367, 368, 372, 388, 390, 393, 397, 401, 407, 413, 414, 425, 428, 430, 435, 437, 441, 447, 448, 457, 462, 463, 469, 470, 471, 472, 476, 483, 487, 515, 546, 555, 558, 570, 579, 583, 587, 593, 594, 596, 609, 613, 617, 621, 629, 637, 657, 658, 701, 717, 724, 763, 768, 774, 776, 779, 780, 787, 805, 812, 815, 820, 824, 833, 847, 852, 866, 875, 883, 889, 895, 907, 928, 931, 932, 933, 934, 936, 937, 943, 945, 947, 948, 949, 951, 953, 954, 957, 963, 965, 967, 980, 981, 983, 988]
    mask = torch.ones(logits.shape)
    mask[:, indices] = 0
    probs[mask] = -1
    preds = probs.argmax(dim=-1)
    return preds


@mapping
def ImageNetStylized_ImageNetR(logits: torch.Tensor):
    return ImageNet1k_ImageNetR(logits)


@mapping
def ImageNet1k_ImageNetA(logits: torch.Tensor):
    probs = torch.softmax(logits, dim=-1)
    indices = [6, 11, 13, 15, 17, 22, 23, 27, 30, 37, 39, 42, 47, 50, 57, 70, 71, 76, 79, 89, 90, 94, 96, 97, 99, 105, 107, 108, 110, 113, 124, 125, 130, 132, 143, 144, 150, 151, 207, 234, 235, 254, 277, 283, 287, 291, 295, 298, 301, 306, 307, 308, 309, 310, 311, 313, 314, 315, 317, 319, 323, 324, 326, 327, 330, 334, 335, 336, 347, 361, 363, 372, 378, 386, 397, 400, 401, 402, 404, 407, 411, 416, 417, 420, 425, 428, 430, 437, 438, 445, 456, 457, 461, 462, 470, 472, 483, 486, 488, 492, 496, 514, 516, 528, 530, 539, 542, 543, 549, 552, 557, 561, 562, 569, 572, 573, 575, 579, 589, 606, 607, 609, 614, 626, 627, 640, 641, 642, 643, 658, 668, 677, 682, 684, 687, 701, 704, 719, 736, 746, 749, 752, 758, 763, 765, 768, 773, 774, 776, 779, 780, 786, 792, 797, 802, 803, 804, 813, 815, 820, 823, 831, 833, 835, 839, 845, 847, 850, 859, 862, 870, 879, 880, 888, 890, 897, 900, 907, 913, 924, 932, 933, 934, 937, 943, 945, 947, 951, 954, 956, 957, 959, 971, 972, 980, 981, 984, 986, 987, 988]
    mask = torch.ones(logits.shape)
    mask[:, indices] = 0
    probs[mask] = -1
    preds = probs.argmax(dim=-1)
    return preds


@mapping
def ImageNet1k_ImageNetR(logits: torch.Tensor):
    return ImageNet1k_ImageNetA(logits)


